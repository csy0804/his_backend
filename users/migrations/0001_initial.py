# Generated by Django 5.1.6 on 2025-05-29 13:38

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('finance', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(choices=[('M', 'MALE'), ('F', 'FEMALE'), ('O', 'OTHER')], default='O', help_text='Select one', max_length=10, verbose_name='gender')),
                ('date_of_birth', models.DateField(default=datetime.datetime(2000, 1, 1, 0, 0), help_text='Date of birth')),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+254...' or '07...'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('location', models.CharField(blank=True, help_text='Current location address', max_length=50, null=True)),
                ('profile', models.ImageField(blank=True, default='default/user.png', null=True, upload_to=users.models.generate_profile_filepath, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])], verbose_name='Profile Picture')),
                ('role', models.CharField(choices=[('Patient', 'PATIENT'), ('Nurse', 'NURSE'), ('Doctor', 'DOCTOR'), ('Admin', 'ADMIN')], default='Patient', help_text='Role of the user in the system', max_length=10)),
                ('bio', models.TextField(blank=True, help_text='Relevant user information.', null=True)),
                ('token', models.CharField(blank=True, help_text='Token for validation', max_length=40, null=True, unique=True, verbose_name='token')),
                ('account', models.OneToOneField(help_text='Finance account', on_delete=django.db.models.deletion.RESTRICT, related_name='user', to='finance.useraccount')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
